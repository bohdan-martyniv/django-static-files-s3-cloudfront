# name: Upload Django Static Files to S3

# on:
#   push:
#     branches:
#       - main

# permissions:
#   id-token: write   # Required for OIDC

# jobs:
#   upload-static:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.11'

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install -r requirements.txt

#       - name: Check AWS caller identity
#         run: aws sts get-caller-identity
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           AWS_REGION: ${{ secrets.AWS_S3_REGION_NAME }}

#       # # Sync static files to S3 using STATICFILES_STORAGE = 'django_static.storage_backends.StaticStorage' variable
#       # - name: Run collectstatic (by using S3Boto3Storage module)
#       #   env:
#       #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #     AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
#       #     AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
#       #     CLOUDFRONT_DOMAIN: ${{ secrets.CLOUDFRONT_DOMAIN }}
#       #     DJANGO_SETTINGS_MODULE: django_static.settings
#       #   run: |
#       #     python manage.py collectstatic --noinput


#       # # Sync static files to S3 using aws s3 sync command
#       # - name: Collect static files
#       #   run: python manage.py collectstatic --noinput

#       # - name: Sync static files to S3
#       #   run: |
#       #     aws s3 sync ./static/ s3://${{ secrets.AWS_STORAGE_BUCKET_NAME }}/static/ --delete
#       #   env:
#       #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #     AWS_REGION: ${{ secrets.AWS_S3_REGION_NAME }}

#       #   Sync static files to S3 using rclone utility
#       # - name: Install rclone
#       #   run: |
#       #     curl https://rclone.org/install.sh | sudo bash

#       # - name: Configure rclone
#       #   run: |
#       #     mkdir -p ~/.config/rclone
#       #     echo "[s3]
#       #     type = s3
#       #     provider = AWS
#       #     access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #     secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       #     region = ${{ secrets.AWS_S3_REGION_NAME }}
#       #     " > ~/.config/rclone/rclone.conf
      
#       # - name: Collect static files
#       #   run: python manage.py collectstatic --noinput
  
#       # - name: Sync static files to S3 using rclone
#       #   run: |
#       #     rclone sync ./static/ s3:${{ secrets.AWS_STORAGE_BUCKET_NAME }}/static/ --verbose

#       - name: Collect static files
#         run: python manage.py collectstatic --noinput

#       # - name: Sync static files to S3 (via rclone)
#       #   uses: ./.github/actions/rclone-s3-sync
#       #   with:
#       #     source_dir: "./static/"
#       #     s3_bucket: "${{ secrets.AWS_STORAGE_BUCKET_NAME }}/static"
#       #     aws_access_key_id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
#       #     aws_secret_access_key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#       #     aws_region: "${{ secrets.AWS_S3_REGION_NAME }}"

#       # - name: Sync static files to S3 (via rclone)
#       #   uses: ./.github/actions/rclone-s3-sync
#       #   with:
#       #     source_dir: "./static/" # directory generated by the collectstatic module for django applicaton
#       #     s3_bucket: "${{ secrets.AWS_STORAGE_BUCKET_NAME }}/static"
#       #     aws_region: "${{ secrets.AWS_S3_REGION_NAME }}"
#       #   env:
#       #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#       #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      

#       - name: Sync static files to S3 (via rclone)
#         uses: ./.github/actions/rclone-s3-sync-oidc
#         with:
#           source_dir: "./static/" # directory generated by the collectstatic module for django applicaton
#           s3_bucket: "${{ secrets.AWS_STORAGE_BUCKET_NAME }}/static"
#           aws_region: "${{ secrets.AWS_S3_REGION_NAME }}"
#           aws_role_arn: "arn:aws:iam::533267139939:role/GitHubActionsS3AccessRole"


### Required Pre configured IAM Role credentials with Trust relationship with GitHub and permission policy to PutObject to S3.
name: Upload Django Static Files to S3

on:
  push:
    branches:
      - main

# permissions:
#   id-token: write   # Required for OIDC

jobs:
  upload-static:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Collect static files
        run: python manage.py collectstatic --noinput

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::533267139939:role/GitHubActionsS3AccessRole"
          aws-region: "${{ secrets.AWS_S3_REGION_NAME }}"
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Rclone Setup
        uses: dashdevs/actions/.github/actions/rclone-setup@reusable-rclone
        with:
          aws_region: "${{ secrets.AWS_S3_REGION_NAME }}"

      - name: Sync static files to S3
        uses: dashdevs/actions/.github/actions/rclone-sync@reusable-rclone
        with:
          source_dir: "./static/" # directory generated by the collectstatic module for django applicaton
          s3_bucket: "${{ secrets.AWS_STORAGE_BUCKET_NAME }}/static"
